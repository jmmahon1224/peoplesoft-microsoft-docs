class Document
   property JavaObject POIClassWrapper get;
   property JavaObject POIDataFormatter get;
   property JavaObject POIDateUtilClass get;
   property JavaObject cellStyleBold get;
   property JavaObject workbook get;
   property JavaObject _workbook;
   property string filepath;
   property string File get;
   property string _File;
   property boolean Fileset;
   property string Extension get;
   property boolean XSSF get set;
   property boolean _XSSF;
   property boolean XSSFset;
   
   method Document();
   method OpenFile() Returns JavaObject;
   method CreateWorkBook() Returns JavaObject;
   method openWorkBook(&file As JavaObject) Returns JavaObject;
   method GetSheet(&workbook As JavaObject, &index As number) Returns JavaObject;
   method createSheet(&workbook As JavaObject, &sheetName As string) Returns JavaObject;
   method GetRow(&sheet As JavaObject, &index As number) Returns JavaObject;
   method GetCell(&row As JavaObject, &index As number) Returns JavaObject;
   method GetCellValue(&cell As JavaObject) Returns string;
   method setCellValueString(&sheet As JavaObject, &row As number, &column As number, &string As string) Returns JavaObject;
   method setCellStyleBold(&cell As JavaObject);
   method setColumnWidth(&sheet As JavaObject, &index As number, &width As number);
   method autoColumnWidth(&sheet As JavaObject, &index As number);
   method outputFile(&workbook As JavaObject) Returns boolean;
   
end-class;

get POIClassWrapper
   /+ Returns JavaObject +/
   Return CreateJavaObject("excel.poi");
end-get;

get POIDataFormatter
   /+ Returns JavaObject +/
   Return CreateJavaObject("org.apache.poi.ss.usermodel.DataFormatter");
end-get;

get POIDateUtilClass
   /+ Returns JavaObject +/
   Return CreateJavaObject("org.apache.poi.hssf.usermodel.HSSFDateUtil");
end-get;

get cellStyleBold
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   Local JavaObject &cellStyleBold = &OBJ_poi_class.getCellStyle(%This._workbook);
   Return &cellStyleBold;
end-get;

get workbook
   /+ Returns JavaObject +/
   Return %This._workbook;
end-get;

get File
   /+ Returns String +/
   Local string &file;
   Local array of string &test;
   Local number &len;
   
   If %This.Fileset = False Then
      %This.Fileset = True;
      If Find("/", %This.filepath) <> 0 Then
         &test = Split(%This.filepath, "/");
      Else
         &test = Split(%This.filepath, "\");
      End-If;
      &len = &test.Len;
      &file = &test [&len];
      %This._File = &file;
   End-If;
   Return %This._File;
end-get;

get Extension
   /+ Returns String +/
   Local string &extension;
   &extension = Substring(%This.File, Find(".", %This.File) + 1, Len(%This.File) - Find(".", %This.File));
   Return &extension;
end-get;

get XSSF
   /+ Returns Boolean +/
   If %This.XSSFset = False Then
      %This.XSSFset = True;
      If Upper(%This.Extension) = "XLS" Then
         %This._XSSF = False;
      Else
         If Upper(%This.Extension) = "XLSX" Then
            %This._XSSF = True;
         Else
            Error "Cannot determine filetype";
         End-If;
      End-If;
   End-If;
   Return %This._XSSF;
end-get;

set XSSF
   /+ &NewValue as Boolean +/
   %This._XSSF = &NewValue;
   %This.XSSFset = True;
end-set;

method Document
   %This.XSSFset = False;
   %This.Fileset = False;
end-method;

method OpenFile
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_fileinputstream = CreateJavaObject("java.io.FileInputStream", %This.filepath);
   Return &OBJ_fileinputstream;
end-method;

method CreateWorkBook
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_excel_workbook;
   If %This.XSSF Then
      &OBJ_excel_workbook = CreateJavaObject("org.apache.poi.xssf.usermodel.XSSFWorkbook");
   Else
      &OBJ_excel_workbook = CreateJavaObject("org.apache.poi.hssf.usermodel.HSSFWorkbook");
   End-If;
   %This._workbook = &OBJ_excel_workbook;
   Return &OBJ_excel_workbook
end-method;

method openWorkBook
   /+ &file as JavaObject +/
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_excel_workbook;
   If %This.XSSF Then
      &OBJ_excel_workbook = CreateJavaObject("org.apache.poi.xssf.usermodel.XSSFWorkbook", &file);
   Else
      &OBJ_excel_workbook = CreateJavaObject("org.apache.poi.hssf.usermodel.HSSFWorkbook", &file);
   End-If;
   %This._workbook = &OBJ_excel_workbook;
   Return &OBJ_excel_workbook
end-method;

method GetSheet
   /+ &workbook as JavaObject, +/
   /+ &index as Number +/
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_excel_sheet;
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   If %This.XSSF Then
      &OBJ_excel_sheet = &OBJ_poi_class.intitiateXSSFSheet(&workbook, CreateJavaObject("java.lang.Integer", &index));
   Else
      &OBJ_excel_sheet = &OBJ_poi_class.intitiateHSSFSheet(&workbook, CreateJavaObject("java.lang.Integer", &index));
   End-If;
   Return &OBJ_excel_sheet;
end-method;

method createSheet
   /+ &workbook as JavaObject, +/
   /+ &sheetName as String +/
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_excel_sheet;
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   &OBJ_excel_sheet = &OBJ_poi_class.createHSSFSheet(&workbook, CreateJavaObject("java.lang.String", &sheetName));
   Return &OBJ_excel_sheet;
end-method;

method GetRow
   /+ &sheet as JavaObject, +/
   /+ &index as Number +/
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_excel_row;
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   If %This.XSSF Then
      &OBJ_excel_row = &OBJ_poi_class.intitiateXSSFRow(&sheet, CreateJavaObject("java.lang.Integer", &index));
   Else
      &OBJ_excel_row = &OBJ_poi_class.intitiateHSSFRow(&sheet, CreateJavaObject("java.lang.Integer", &index));
   End-If;
   Return &OBJ_excel_row;
end-method;

method GetCell
   /+ &row as JavaObject, +/
   /+ &index as Number +/
   /+ Returns JavaObject +/
   Local JavaObject &OBJ_excel_cell;
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   
   try
      If %This.XSSF Then
         &OBJ_excel_cell = &OBJ_poi_class.intitiateXSSFCell(&row, CreateJavaObject("java.lang.Integer", &index));
      Else
         &OBJ_excel_cell = &OBJ_poi_class.intitiateHSSFCell(&row, CreateJavaObject("java.lang.Integer", &index));
      End-If;
      
   catch Exception &exGetCell
      rem MessageBox(0, "", 0, 0, "Exception &exGetCell: " | &exGetCell.ToString());
   end-try;
   
   Return &OBJ_excel_cell;
end-method;

method GetCellValue
   /+ &cell as JavaObject +/
   /+ Returns String +/
   Local JavaObject &OBJ_data_formatter = %This.POIDataFormatter;
   Local string &cellvalue;
   
   try
      Evaluate &cell.getCellType()
         /* 0 CELL_TYPE_NUMERIC */
      When = 0
         If %This.POIDateUtilClass.isCellDateFormatted(&cell) Then
            &cellvalue = DateTimeToLocalizedString(&cell.getDateCellValue(), "yyyy-MM-dd");
            rem &cellvalue = &OBJ_data_formatter.formatCellValue(&cell);
         Else
            rem &cellvalue = &cell.getNumericCellValue();
            &cellvalue = &OBJ_data_formatter.formatCellValue(&cell);
         End-If;
         Break;
         /* 1 CELL_TYPE_STRING */
      When = 1
         &cellvalue = &cell.getStringCellValue();
         Break;
         /* 2 CELL_TYPE_FORMULA */
      When = 2
         &cellvalue = &cell.getCellFormula();
         Break;
         /* 3 CELL_TYPE_BLANK */
      When = 3
         &cellvalue = &cell.getStringCellValue();
         Break;
         /* 4 CELL_TYPE_BOOLEAN */
      When = 4
         &cellvalue = &cell.getBooleanCellValue();
         Break;
         /* 5 CELL_TYPE_ERROR */
      When = 5
         &cellvalue = &cell.getErrorCellValue();
         Break;
      End-Evaluate;
      
   catch Exception &exGetCellValue
      rem MessageBox(0, "", 0, 0, "Exception &exGetCellValue: " | &exGetCellValue.ToString());
   end-try;
   
   Return &cellvalue;
end-method;

method setCellValueString
   /+ &sheet as JavaObject, +/
   /+ &row as Number, +/
   /+ &column as Number, +/
   /+ &string as String +/
   /+ Returns JavaObject +/
   
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   Local JavaObject &OBJ_excel_cell;
   rem MessageBox(0, "", 0, 0, "&sheet: " | &sheet | " &row: " | &row | " &column: " | &column | " &string: " | &string);
   rem &OBJ_poi_class.setCellValueString(&sheet, CreateJavaObject("java.lang.Integer", &column), CreateJavaObject("java.lang.Integer", &row), &string);
   &OBJ_excel_cell = &OBJ_poi_class.setCellValueString(&sheet, &column, &row, &string);
   Return &OBJ_excel_cell;
end-method;

method setCellStyleBold
   /+ &cell as JavaObject +/
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   &OBJ_poi_class.setCellStyle(&cell, %This.cellStyleBold);
end-method;

/* Width is screwed up, width you want in pixels(not points)/2 * 50 */
method setColumnWidth
   /+ &sheet as JavaObject, +/
   /+ &index as Number, +/
   /+ &width as Number +/
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   &OBJ_poi_class.setColumnWidth(&sheet, &index, &width);
end-method;

method autoColumnWidth
   /+ &sheet as JavaObject, +/
   /+ &index as Number +/
   Local JavaObject &OBJ_poi_class = %This.POIClassWrapper;
   &OBJ_poi_class.autoColumnWidth(&sheet, &index);
end-method;

method outputFile
   /+ &workbook as JavaObject +/
   /+ Returns Boolean +/
   Local JavaObject &OBJ_fileouputstream = CreateJavaObject("java.io.FileOutputStream", CreateJavaObject("java.io.File", %This.filepath));
   &workbook.write(&OBJ_fileouputstream);
   &OBJ_fileouputstream.close();
   Return True;
end-method;
